{"version":3,"sources":["../../staging/src/slide-toggle.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,KAAA,EAAO,MAAA,EAAQ,YAAA,EAAc,uBAAA,EAAwB,MAAO,eAAA,CAAgB;AAGhG;IAAA;QAEG,UAAK,GAAG,KAAK,CAAC;QACd,WAAM,GAAG,IAAI,CAAC;QACd,YAAO,GAAG,KAAK,CAAC;QAChB,YAAO,GAAG,SAAS,CAAC;QACrB,aAAQ,GAAG,SAAS,CAAC;QAEpB,gBAAW,GAAG,IAAI,YAAY,EAAW,CAAC;IA4B7C,CAAC;IA1BC,uCAAQ,GAAR;QACE,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;QACzB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAED,sBAAI,uCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QACnD,CAAC;;;OAAA;IAmBH,2BAAC;AAAD,CApCA,AAoCC;;AAlBM,+BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,cAAc;gBACxB,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,QAAQ,EAAE,iSAAiS;gBAC3S,MAAM,EAAE,CAAC,mxEAAmxE,CAAC;aAC9xE,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,mCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AACK,mCAAc,GAA2C;IAChE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC3B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;CACjC,CAAC","file":"slide-toggle.component.js","sourceRoot":"","sourcesContent":["import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport class SlideToggleComponent {\n\n   value = false;\n   onText = 'ON';\n   offText = 'OFF';\n   onColor = '#0088cc';\n  offColor = '#eceeef';\n\n   valueChange = new EventEmitter<boolean>();\n\n  onToggle() {\n    this.value = !this.value;\n    this.valueChange.emit(this.value);\n  }\n\n  get color(): string {\n    return this.value ? this.onColor : this.offColor;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'slide-toggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: \"<label class=\\\"switch\\\"> <input class=\\\"switch-input\\\" type=\\\"checkbox\\\" [checked]=\\\"value\\\" (change)=\\\"onToggle()\\\"/> <span class=\\\"switch-label\\\" [attr.data-on]=\\\"onText\\\" [attr.data-off]=\\\"offText\\\" [style.background]=\\\"color\\\"></span>  <span class=\\\"switch-handle\\\"></span>  </label>\",\n  styles: [\".switch { position: relative; display: block; width: 100px; height: 30px; padding: 3px; margin: 2px; background: linear-gradient(to bottom, #eeeeee, #FFFFFF 25px); background-image: -webkit-linear-gradient(top, #eeeeee, #FFFFFF 25px); border-radius: 18px; box-shadow: inset 0 -1px white, inset 0 1px 1px rgba(0, 0, 0, 0.05); cursor: pointer; box-sizing:content-box; } .switch-input { position: absolute; top: 0; left: 0; opacity: 0; box-sizing:content-box; } .switch-label { position: relative; display: block; height: inherit; font-size: 10px; text-transform: uppercase; border-radius: inherit; box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.12), inset 0 0 2px rgba(0, 0, 0, 0.15); box-sizing:content-box; } .switch-label:before, .switch-label:after { position: absolute; top: 50%; margin-top: -.5em; line-height: 1; -webkit-transition: inherit; -moz-transition: inherit; -o-transition: inherit; transition: inherit; box-sizing:content-box; } .switch-label:before { content: attr(data-off); right: 11px; color: #aaaaaa; text-shadow: 0 1px rgba(255, 255, 255, 0.5); } .switch-label:after { content: attr(data-on); left: 11px; color: #FFFFFF; text-shadow: 0 1px rgba(0, 0, 0, 0.2); opacity: 0; } .switch-input:checked ~ .switch-label { background: #E1B42B; box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.15), inset 0 0 3px rgba(0, 0, 0, 0.2); } .switch-input:checked ~ .switch-label:before { opacity: 0; } .switch-input:checked ~ .switch-label:after { opacity: 1; } .switch-handle { position: absolute; top: 4px; left: 4px; width: 28px; height: 28px; background: linear-gradient(to bottom, #FFFFFF 40%, #f0f0f0); background-image: -webkit-linear-gradient(top, #FFFFFF 40%, #f0f0f0); border-radius: 100%; box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.2); } .switch-handle:before { content: \\\"\\\"; position: absolute; top: 50%; left: 50%; margin: -6px 0 0 -6px; width: 12px; height: 12px; background: linear-gradient(to bottom, #eeeeee, #FFFFFF); background-image: -webkit-linear-gradient(top, #eeeeee, #FFFFFF); border-radius: 6px; box-shadow: inset 0 1px rgba(0, 0, 0, 0.02); } .switch-input:checked ~ .switch-handle { left: 74px; box-shadow: -1px 1px 5px rgba(0, 0, 0, 0.2); } .switch-label, .switch-handle { transition: All 0.3s ease; -webkit-transition: All 0.3s ease; -moz-transition: All 0.3s ease; -o-transition: All 0.3s ease; }\"]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'onText': [{ type: Input },],\n'offText': [{ type: Input },],\n'onColor': [{ type: Input },],\n'valueChange': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}