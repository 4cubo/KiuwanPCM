{"version":3,"sources":["../../../staging/src/complex-list-field/complex-list-field.component.ts"],"names":[],"mappings":"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","file":"complex-list-field.component.js","sourceRoot":"","sourcesContent":["/*\n * This file is part of ng2-json-editor.\n * Copyright (C) 2016 CERN.\n *\n * ng2-json-editor is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; either version 2 of the\n * License, or (at your option) any later version.\n *\n * ng2-json-editor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with ng2-json-editor; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n * In applying this license, CERN does not\n * waive the privileges and immunities granted to it by virtue of its status\n * as an Intergovernmental Organization or submit itself to any jurisdiction.\n*/\n\nimport {\n  Component,\n  Input,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  SimpleChanges,\n  ChangeDetectorRef,\n  TemplateRef\n} from '@angular/core';\nimport { List, Map, Set, Iterable } from 'immutable';\n\nimport { AbstractListFieldComponent } from '../abstract-list-field';\nimport {\n  AppGlobalsService,\n  JsonStoreService,\n  DomUtilService,\n  PathUtilService,\n  ListPageChangerService,\n  ProblemsService\n} from '../shared/services';\nimport { LongListNavigatorConfig, JSONSchema, PaginatedItem } from '../shared/interfaces';\n\n\nexport class ComplexListFieldComponent extends AbstractListFieldComponent implements OnChanges, OnInit {\n\n   values: List<Map<string, any>>;\n   schema: JSONSchema;\n   path: Array<any>;\n\n  paginatedItems: Iterable<number, PaginatedItem>;\n  paginatableItems: Iterable<number, PaginatedItem>;\n\n  foundIndices: Array<number>;\n  currentFound = 0;\n  currentPage = 1;\n  findExpression: string;\n  navigator: LongListNavigatorConfig;\n  shouldDisplayFoundNavigation: boolean;\n  private _shouldDisplayOnlyEditFormItems = false;\n\n  constructor(public appGlobalsService: AppGlobalsService,\n    public problemsService: ProblemsService,\n    public jsonStoreService: JsonStoreService,\n    public domUtilService: DomUtilService,\n    public pathUtilService: PathUtilService,\n    public changeDetectorRef: ChangeDetectorRef,\n    public listPageChangerService: ListPageChangerService) {\n    super(appGlobalsService, problemsService, jsonStoreService, pathUtilService, changeDetectorRef);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.navigator = this.schema.longListNavigatorConfig;\n    this.paginatableItems = this.getPaginatableItems();\n    this.paginatedItems = this.getPaginatableItemsForPage(this.currentPage);\n\n    if (this.navigator) {\n      this.listPageChangerService\n        .registerPaginatedList(this.pathString, this.navigator.itemsPerPage)\n        .skipWhile(page => page === this.currentPage)\n        .takeUntil(this.isDestroyed)\n        .subscribe(page => this.onPageChange(page));\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    super.ngOnChanges(changes);\n\n    const valuesChange = changes['values'];\n    if (valuesChange && !valuesChange.isFirstChange()) {\n      const preSize = valuesChange.previousValue.size;\n      const curSize = valuesChange.currentValue.size;\n\n      if (curSize !== preSize) {\n        if (this.navigator) {\n          // check if element added in the end by comparing the last elements\n          const elementAddedToEnd = valuesChange.previousValue.equals(valuesChange.currentValue.pop());\n          const lastPage = this.getPageForIndex(curSize - 1);\n          // change the page if a new element is added in the end and it's not on the last page\n          if (curSize > preSize && this.currentPage !== lastPage && elementAddedToEnd) {\n            this.currentPage = lastPage;\n          }\n        }\n        this.paginatableItems = this.getPaginatableItems();\n        this.paginatedItems = this.getPaginatableItemsForPage(this.currentPage);\n      }\n    }\n  }\n\n  hasProblemOrPatch(index: number) {\n    const itemPath = this.getPathStringForChild(index);\n    return this.problemsService.hasProblem(itemPath) || this.jsonStoreService.hasPatch(itemPath);\n  }\n\n  get headerItemTemplate(): TemplateRef<any> {\n    return this.appGlobalsService.templates[this.navigator.headerItemTemplateName];\n  }\n\n  onFindClick() {\n    // clear for new search\n    this.foundIndices = [];\n    this.currentFound = 0;\n    // search to look for the first match\n    if (this.navigator.findSingle) {\n      const foundIndex = this.values\n        .findIndex(value => this.navigator.findSingle(value, this.findExpression));\n      if (foundIndex > -1) {\n        this.foundIndices.push(foundIndex);\n      }\n    }\n    // search to look for all matches\n    if (this.foundIndices.length === 0 && this.navigator.findMultiple) {\n      this.values\n        .forEach((value, index) => {\n          if (this.navigator.findMultiple(value, this.findExpression)) {\n            this.foundIndices.push(index);\n          }\n        });\n    }\n    // navigate to first search result if found any\n    if (this.foundIndices.length > 0) {\n      this.navigateToItem(this.foundIndices[0]);\n      this.shouldDisplayFoundNavigation = true;\n    } else {\n      this.shouldDisplayFoundNavigation = false;\n    }\n  }\n\n  onFindInputKeypress(key: string) {\n    if (key === 'Enter') {\n      this.onFindClick();\n    }\n  }\n\n  onFoundNavigate(direction: number) {\n    // No bound checks, since the buttons are disabled in these cases.\n    this.currentFound += direction;\n    this.navigateToItem(this.foundIndices[this.currentFound]);\n  }\n\n  navigateToItem(index: number) {\n    this.currentPage = this.getPageForIndex(index);\n    const itemPath = this.path.concat(index);\n    const itemId = this.pathUtilService.toPathString(itemPath);\n    setTimeout(() => this.domUtilService.focusAndSelectFirstEditableChildById(itemId));\n  }\n\n  onPageChange(page: number) {\n    this.currentPage = page;\n    this.paginatedItems = this.getPaginatableItemsForPage(page);\n  }\n\n  getPaginatableItemsForPage(page: number): Iterable<number, PaginatedItem> {\n    if (this.navigator) {\n      const begin = (page - 1) * this.navigator.itemsPerPage;\n      const end = (page * this.navigator.itemsPerPage);\n      return this.paginatableItems.slice(begin, end);\n    } else {\n      return this.paginatableItems;\n    }\n  }\n\n  getPaginatableItems(): Iterable<number, PaginatedItem> {\n    return this.values\n      .map((value, index) => {\n        const viewTemplateConfig = this.schema.viewTemplateConfig;\n        const isEditFormVisible = viewTemplateConfig ? viewTemplateConfig.showEditForm(value) : true;\n        return { index, isEditFormVisible };\n      }).filter(item => {\n        if (this.shouldDisplayOnlyEditFormItems) {\n          return item.isEditFormVisible;\n        } else {\n          return true;\n        }\n      });\n  }\n\n  getPageForIndex(index: number): number {\n    return Math.floor((index / this.navigator.itemsPerPage) + 1);\n  }\n\n  get customTemplate(): TemplateRef<any> {\n    return this.appGlobalsService.templates[this.schema.viewTemplateConfig.itemTemplateName];\n  }\n\n  get shouldDisplayViewTemplate(): boolean {\n    return this.schema.viewTemplateConfig !== undefined;\n  }\n\n  get sortable(): boolean {\n    return this.schema.sortable && !this.shouldDisplayOnlyEditFormItems;\n  }\n\n  set shouldDisplayOnlyEditFormItems(value: boolean) {\n    this.currentPage = 1;\n    this._shouldDisplayOnlyEditFormItems = value;\n    this.paginatableItems = this.getPaginatableItems();\n    this.paginatedItems = this.getPaginatableItemsForPage(this.currentPage);\n  }\n\n  get shouldDisplayOnlyEditFormItems(): boolean {\n    return this._shouldDisplayOnlyEditFormItems;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'complex-list-field',\n  styles: [\".complex-list-field-wrapper { margin: 10px 15px 15px 10px; padding: 5px; box-shadow: 0 0 3px 1px rgba(0, 0, 0, 0.25); } .top-bar-container { width: 100%; position: sticky; top: 0; z-index: 1; display: flex; align-items: center; justify-content: space-between; padding: 0 15px; background-color: white; box-shadow: 0 0.5px 0 0 #ffffff inset, 0 1px 2px 0 #B3B3B3; } .item-count-label { position: relative; top: -19px; } .transparent { background: transparent; } .borderless { border: none; } .find-button { color: darkslategray; } .find-button .fa-search { opacity: 0.83; } .element-button-container { padding-top: 8px; } .element-button-container .text-right { padding: 0px; } label.btn { color: white !important; } \"],\n  template: \"<div [id]=\\\"pathString\\\"> <!-- Top Bar: Navigator, ToEdit/All switch, custom header item etc. --> <div *ngIf=\\\"navigator || shouldDisplayViewTemplate\\\" class=\\\"top-bar-container\\\"> <div *ngIf=\\\"navigator\\\"> <div class=\\\"input-group input-group-sm\\\"> <span class=\\\"input-group-btn\\\"> <button type=\\\"button\\\" class=\\\"btn btn-default find-button\\\" (click)=\\\"onFindClick()\\\"> <i class=\\\"fa fa-search\\\" aria-hidden=\\\"true\\\"></i> </button> </span> <input type=\\\"search\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"findExpression\\\" (keypress)=\\\"onFindInputKeypress($event.key)\\\" placeholder=\\\"Find\\\" /> <span class=\\\"input-group-btn\\\" *ngIf=\\\"shouldDisplayFoundNavigation\\\"> <button type=\\\"button\\\" class=\\\"btn btn-default\\\" [disabled]=\\\"currentFound <= 0\\\" (click)=\\\"onFoundNavigate(-1)\\\">❮</button> </span> <span class=\\\"input-group-btn\\\" *ngIf=\\\"shouldDisplayFoundNavigation\\\"> <button type=\\\"button\\\" class=\\\"btn btn-default\\\" [disabled]=\\\"currentFound >= foundIndices.length - 1\\\" (click)=\\\"onFoundNavigate(1)\\\">❯</button> </span> <span *ngIf=\\\"foundIndices\\\" [ngSwitch]=\\\"foundIndices.length\\\" class=\\\"input-group-addon transparent borderless\\\"> <span *ngSwitchCase=\\\"0\\\"> Nothing found </span> <span *ngSwitchDefault> {{currentFound + 1}} of {{foundIndices.length}} </span> </span> </div> </div> <div *ngIf=\\\"shouldDisplayViewTemplate\\\" class=\\\"btn-group\\\"> <label class=\\\"btn btn-switch\\\" [class.active]=\\\"!shouldDisplayOnlyEditFormItems\\\" (click)=\\\"shouldDisplayOnlyEditFormItems = false\\\">All</label> <label class=\\\"btn btn-switch\\\" [class.active]=\\\"shouldDisplayOnlyEditFormItems\\\" (click)=\\\"shouldDisplayOnlyEditFormItems = true\\\">To Edit</label> </div> <div *ngIf=\\\"headerItemTemplate\\\"> <ng-template [ngTemplateOutlet]=\\\"headerItemTemplate\\\"></ng-template> </div> <div *ngIf=\\\"navigator\\\"> <label class=\\\"item-count-label\\\"> {{paginatableItems.size}} {{path[path.length - 1]}} </label> <br> <pagination [totalItems]=\\\"paginatableItems.size\\\" [ngModel]=\\\"currentPage\\\" [maxSize]=\\\"navigator.maxVisiblePageCount\\\" [itemsPerPage]=\\\"navigator.itemsPerPage\\\" class=\\\"pagination-sm pagination-top\\\" [boundaryLinks]=\\\"true\\\" [rotate]=\\\"false\\\" [firstText]=\\\"'❮❮'\\\" [previousText]=\\\"'❮'\\\" [nextText]=\\\"'❯'\\\" [lastText]=\\\"'❯❯'\\\" (pageChanged)=\\\"onPageChange($event.page)\\\"></pagination> </div> </div> <div [ngClass]=\\\"redLeftBorderClass\\\"> <!-- Elements --> <div *ngFor=\\\"let item of paginatedItems; trackBy:trackByElement\\\"> <div class=\\\"complex-list-field-wrapper\\\"> <span *ngIf=\\\"shouldDisplayViewTemplate && values.get(item.index).keySeq().size != 0\\\"> <ng-template [ngTemplateOutlet]=\\\"customTemplate\\\" [ngTemplateOutletContext]=\\\"{item: values.get(item.index)}\\\"></ng-template> <a href=\\\"javascript:void(0)\\\" (click)=\\\"item.isEditFormVisible = !item.isEditFormVisible\\\"> {{item.isEditFormVisible ? 'Hide Fields' : 'Show Fields'}} </a> </span> <span *ngIf=\\\"item.isEditFormVisible || hasProblemOrPatch(item.index)\\\"> <object-field [value]=\\\"values.get(item.index)\\\" [schema]=\\\"schema.items\\\" [path]=\\\"getPathForChild(item.index)\\\" [isComplexListFieldItem]=\\\"true\\\"> </object-field> <div class=\\\"row element-button-container\\\"> <div class=\\\"col-md-12 text-right\\\"> <list-action-group (onMove)=\\\"moveElement(item.index, $event)\\\" (onDelete)=\\\"deleteElement(item.index)\\\" [canMove]=\\\"sortable\\\" [isDisabled]=\\\"disabled || hasPatchOrChildrenHavePatch()\\\"> </list-action-group> </div> </div> </span> </div> </div> <div class=\\\"text-right\\\" *ngIf=\\\"removeJsonPatch\\\"> <patch-actions [patch]=\\\"removeJsonPatch\\\"></patch-actions> </div> </div> <div *ngFor=\\\"let patch of addJsonPatches\\\" class=\\\"complex-list-field-wrapper\\\"> <add-or-replace-patch [patch]=\\\"patch\\\"></add-or-replace-patch> </div> <div *ngIf=\\\"replaceJsonPatches && replaceJsonPatches[0]\\\"> <add-or-replace-patch [patch]=\\\"replaceJsonPatches[0]\\\"></add-or-replace-patch> </div> </div> \",\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AppGlobalsService, },\n{type: ProblemsService, },\n{type: JsonStoreService, },\n{type: DomUtilService, },\n{type: PathUtilService, },\n{type: ChangeDetectorRef, },\n{type: ListPageChangerService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'values': [{ type: Input },],\n'schema': [{ type: Input },],\n'path': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}