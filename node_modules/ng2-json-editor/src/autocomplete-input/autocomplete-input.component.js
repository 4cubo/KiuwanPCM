/*
 * This file is part of INSPIRE.
 * Copyright (C) 2016 CERN.
 *
 * INSPIRE is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * INSPIRE is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with INSPIRE; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 * In applying this license, CERN does not
 * waive the privileges and immunities granted to it by virtue of its status
 * as an Intergovernmental Organization or submit itself to any jurisdiction.
*/
import { Component, EventEmitter, Input, Output, ChangeDetectionStrategy } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { JsonStoreService, RemoteAutocompletionService, AppGlobalsService, KeysStoreService } from '../shared/services';
var AutocompleteInputComponent = (function () {
    function AutocompleteInputComponent(remoteAutocompletionService, jsonStoreService, keysStoreService, appGlobalsService) {
        this.remoteAutocompletionService = remoteAutocompletionService;
        this.jsonStoreService = jsonStoreService;
        this.keysStoreService = keysStoreService;
        this.appGlobalsService = appGlobalsService;
        this.onValueChange = new EventEmitter();
        this.onKeypress = new EventEmitter();
        this.onBlur = new EventEmitter();
    }
    AutocompleteInputComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.autocompletionConfig.url) {
            // remote
            this.typeaheadOptionField = this.autocompletionConfig.optionField || 'text';
            this.dataSource = Observable.create(function (observer) {
                if (_this.value && _this.value.length > 0) {
                    observer.next(_this.value);
                }
            }).mergeMap(function (token) {
                return _this.remoteAutocompletionService.getAutocompletionResults(_this.autocompletionConfig, token);
            });
        }
        else {
            // local
            this.typeaheadOptionField = this.autocompletionConfig.optionField || '';
            this.dataSource = this.autocompletionConfig.source;
        }
    };
    Object.defineProperty(AutocompleteInputComponent.prototype, "customItemTemplate", {
        get: function () {
            return this.appGlobalsService.templates[this.autocompletionConfig.itemTemplateName];
        },
        enumerable: true,
        configurable: true
    });
    AutocompleteInputComponent.prototype.onModelChange = function (value) {
        this.value = value;
        this.onValueChange.emit(value);
    };
    AutocompleteInputComponent.prototype.onCompletionSelect = function (selection) {
        var onCompletionSelect = this.autocompletionConfig.onCompletionSelect;
        if (onCompletionSelect) {
            // .slice() is used to pass by value instead of reference
            onCompletionSelect(this.path.slice(), selection, this.jsonStoreService, this.keysStoreService);
        }
    };
    return AutocompleteInputComponent;
}());
export { AutocompleteInputComponent };
AutocompleteInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'autocomplete-input',
                styles: [""],
                template: "<div class=\"autocomplete-container\"> <input attr.data-path=\"{{pathString}}\" [ngModel]=\"value\" (ngModelChange)=\"onModelChange($event)\" (keypress)=\"onKeypress.emit($event)\" (blur)=\"onBlur.emit()\" [typeahead]=\"dataSource\" [typeaheadOptionsLimit]=\"autocompletionConfig.size\" [typeaheadOptionField]=\"typeaheadOptionField\" [typeaheadItemTemplate]=\"customItemTemplate\" (typeaheadOnSelect)=\"onCompletionSelect($event.item)\" [typeaheadWaitMs]=\"200\" [tabindex]=\"tabIndex\" placeholder=\"{{placeholder}}\"> </div>",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
AutocompleteInputComponent.ctorParameters = function () { return [
    { type: RemoteAutocompletionService, },
    { type: JsonStoreService, },
    { type: KeysStoreService, },
    { type: AppGlobalsService, },
]; };
AutocompleteInputComponent.propDecorators = {
    'autocompletionConfig': [{ type: Input },],
    'path': [{ type: Input },],
    'value': [{ type: Input },],
    'pathString': [{ type: Input },],
    'tabIndex': [{ type: Input },],
    'placeholder': [{ type: Input },],
    'onValueChange': [{ type: Output },],
    'onKeypress': [{ type: Output },],
    'onBlur': [{ type: Output },],
};
//# sourceMappingURL=autocomplete-input.component.js.map