{"version":3,"sources":["../../../staging/src/autocomplete-input/autocomplete-input.component.ts"],"names":[],"mappings":"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","file":"autocomplete-input.component.js","sourceRoot":"","sourcesContent":["/*\n * This file is part of INSPIRE.\n * Copyright (C) 2016 CERN.\n *\n * INSPIRE is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; either version 2 of the\n * License, or (at your option) any later version.\n *\n * INSPIRE is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with INSPIRE; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n * In applying this license, CERN does not\n * waive the privileges and immunities granted to it by virtue of its status\n * as an Intergovernmental Organization or submit itself to any jurisdiction.\n*/\n\nimport { Component, EventEmitter, Input, OnInit, Output, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\nimport { JsonStoreService, RemoteAutocompletionService, AppGlobalsService, KeysStoreService } from '../shared/services';\nimport { AutocompletionConfig } from '../shared/interfaces';\n\n\nexport class AutocompleteInputComponent implements OnInit {\n\n   autocompletionConfig: AutocompletionConfig;\n   path: Array<any>;\n   value: string;\n   pathString: string;\n   tabIndex: number;\n   placeholder: string;\n\n   onValueChange: EventEmitter<string> = new EventEmitter<any>();\n   onKeypress: EventEmitter<KeyboardEvent> = new EventEmitter<any>();\n   onBlur: EventEmitter<any> = new EventEmitter<any>();\n\n  dataSource: Observable<Array<string | object>> | Array<string | object>;\n  typeaheadOptionField: string;\n\n  constructor(public remoteAutocompletionService: RemoteAutocompletionService,\n    public jsonStoreService: JsonStoreService,\n    public keysStoreService: KeysStoreService,\n    public appGlobalsService: AppGlobalsService) { }\n\n  ngOnInit() {\n    if (this.autocompletionConfig.url) {\n      // remote\n      this.typeaheadOptionField = this.autocompletionConfig.optionField || 'text';\n      this.dataSource = Observable.create((observer: any) => {\n        if (this.value && this.value.length > 0) {\n          observer.next(this.value);\n        }\n      }).mergeMap((token: string) =>\n        this.remoteAutocompletionService.getAutocompletionResults(this.autocompletionConfig, token));\n    } else {\n      // local\n      this.typeaheadOptionField = this.autocompletionConfig.optionField || '';\n      this.dataSource = this.autocompletionConfig.source;\n    }\n  }\n\n  get customItemTemplate(): TemplateRef<any> {\n    return this.appGlobalsService.templates[this.autocompletionConfig.itemTemplateName];\n  }\n\n  onModelChange(value: string) {\n    this.value = value;\n    this.onValueChange.emit(value);\n  }\n\n  onCompletionSelect(selection: object | string) {\n    const onCompletionSelect = this.autocompletionConfig.onCompletionSelect;\n    if (onCompletionSelect) {\n      // .slice() is used to pass by value instead of reference\n      onCompletionSelect(this.path.slice(), selection, this.jsonStoreService, this.keysStoreService);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'autocomplete-input',\n  styles: [\"\"],\n  template: \"<div class=\\\"autocomplete-container\\\"> <input attr.data-path=\\\"{{pathString}}\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"onModelChange($event)\\\" (keypress)=\\\"onKeypress.emit($event)\\\" (blur)=\\\"onBlur.emit()\\\" [typeahead]=\\\"dataSource\\\" [typeaheadOptionsLimit]=\\\"autocompletionConfig.size\\\" [typeaheadOptionField]=\\\"typeaheadOptionField\\\" [typeaheadItemTemplate]=\\\"customItemTemplate\\\" (typeaheadOnSelect)=\\\"onCompletionSelect($event.item)\\\" [typeaheadWaitMs]=\\\"200\\\" [tabindex]=\\\"tabIndex\\\" placeholder=\\\"{{placeholder}}\\\"> </div>\",\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: RemoteAutocompletionService, },\n{type: JsonStoreService, },\n{type: KeysStoreService, },\n{type: AppGlobalsService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocompletionConfig': [{ type: Input },],\n'path': [{ type: Input },],\n'value': [{ type: Input },],\n'pathString': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'onValueChange': [{ type: Output },],\n'onKeypress': [{ type: Output },],\n'onBlur': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}