{"version":3,"sources":["../../../../staging/src/shared/directives/content-model.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,UAAU,EACV,KAAK,EACL,MAAM,EACN,YAAY,EACZ,YAAY,EAGb,MAAM,eAAA,CAAgB;AAGvB;IAME,+BAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAFzC,uBAAkB,GAAG,IAAI,YAAY,EAAU,CAAC;IAEH,CAAC;IAE/C,2CAAW,GAAX,UAAY,OAAsB;QAChC,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;IACH,CAAC;IAGD,sCAAM,GAAN;QACE,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;IAGD,0CAAU,GAAV,UAAW,KAAoB;QAC7B,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,KAAK,OAAO,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAChC,CAAC;IACH,CAAC;IAEO,sDAAsB,GAA9B;QACE,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC;QACtD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAEO,uCAAO,GAAf;QACE,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC;IAC9D,CAAC;IAgBH,4BAAC;AAAD,CAjDA,AAiDC;;AAfM,gCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,gBAAgB;aAC3B,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,oCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,EAF6F,CAE7F,CAAC;AACK,oCAAc,GAA2C;IAChE,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAClC,oBAAoB,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;IACzC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,MAAM,EAAG,EAAE,EAAE;IACrD,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,UAAU,EAAE,CAAC,QAAQ,CAAC,EAAG,EAAE,EAAE;CACxE,CAAC","file":"content-model.directive.js","sourceRoot":"","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\n\n\nexport class ContentModelDirective implements OnChanges {\n\n   contentModel: string;\n\n   contentModelChange = new EventEmitter<string>();\n\n  constructor(private elementRef: ElementRef) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['contentModel']) {\n      this.refresh();\n    }\n  }\n\n  \n  onBlur() {\n    this.emitContentModelChange();\n  }\n\n  \n  onKeypress(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.emitContentModelChange();\n    }\n  }\n\n  private emitContentModelChange() {\n    const value = this.elementRef.nativeElement.innerText;\n    this.contentModelChange.emit(value);\n  }\n\n  private refresh() {\n    this.elementRef.nativeElement.innerText = this.contentModel;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[contentModel]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'contentModel': [{ type: Input },],\n'contentModelChange': [{ type: Output },],\n'onBlur': [{ type: HostListener, args: ['blur', ] },],\n'onKeypress': [{ type: HostListener, args: ['keypress', ['$event'], ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}