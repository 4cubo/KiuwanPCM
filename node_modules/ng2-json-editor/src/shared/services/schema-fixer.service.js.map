{"version":3,"sources":["../../../../staging/src/shared/services/schema-fixer.service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;EAoBE;AAEF,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,KAAK,CAAA,MAAO,QAAA,CAAS;AAE5B,OAAO,EAAE,eAAA,EAAgB,MAAO,qBAAA,CAAsB;AACtD,OAAO,EAAE,oBAAA,EAAqB,MAAO,0BAAA,CAA2B;AAIhE;IAEE,4BAAoB,eAAgC,EAC1C,oBAA0C;QADhC,oBAAe,GAAf,eAAe,CAAiB;QAC1C,yBAAoB,GAApB,oBAAoB,CAAsB;IAAI,CAAC;IAEzD;;;;;;OAMG;IACH,sCAAS,GAAT,UAAU,cAA0B,EAAE,MAAsB;QAC1D,IAAI,MAAM,GAAG,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,MAAM,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACvD,CAAC;QACD,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACrC,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED;;;;;;OAMG;IACK,mDAAsB,GAA9B,UAA+B,MAAkB,EAAE,MAAqB;QACtE,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,UAAC,aAAa,EAAE,aAAa,EAAE,GAAG;YACnE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,YAAY,IAAI,GAAG,KAAK,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBAChE,OAAO,CAAC,IAAI,CAAC,eAAa,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,UAAC,SAAS,EAAE,KAAK;oBACvE,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC;wBAChC,MAAM,CAAC,KAAK,CAAC;oBACf,CAAC;oBACD,MAAM,CAAC,KAAK,CAAC;gBACf,CAAC,EAAE,CAAC,CAAC,+BAAyB,GAAG,0CAAmC,GAAG,OAAG,CAAC,CAAC;gBAC5E,oDAAoD;gBACpD,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YACD,EAAE,CAAC,CAAC,aAAa,IAAI,GAAG,KAAK,YAAY,CAAC,CAAC,CAAC;gBAC1C,IAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC9C,UAAU;qBACP,MAAM,CAAC,UAAA,SAAS,IAAI,OAAA,CAAC,aAAa,CAAC,SAAS,CAAC,EAAzB,CAAyB,CAAC;qBAC9C,OAAO,CAAC,UAAA,cAAc;oBACrB,OAAO,aAAa,CAAC,cAAc,CAAC,CAAC;oBACrC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAC/B,CAAC,CAAC,CAAC;YACP,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,2CAAc,GAAtB,UAAuB,MAAkB;QAAzC,iBAiCC;QAhCC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACjB,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACjC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACxB,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACjC,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACjB,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACjC,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YACpB,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACpC,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;YACtB,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACtC,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC5B,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAC5C,CAAC;QACD,kCAAkC;QAElC,8CAA8C;QAC9C,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;iBAC3B,OAAO,CAAC,UAAA,IAAI;gBACX,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,KAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YACzE,CAAC,CAAC,CAAC;QACP,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACnD,CAAC;QACD,wEAAwE;QACxE,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAE1E,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED;;;OAGG;IACK,wCAAW,GAAnB,UAAoB,MAAkB;QACpC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC/B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;iBAC3B,OAAO,CAAC,UAAA,IAAI;gBACX,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC;YAC1C,CAAC,CAAC,CAAC;QACP,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,qCAAQ,GAAhB,UAAiB,MAAkB;QACjC,IAAM,KAAK,GAAkB,MAAM,CAAC,KAAK,CAAC;QAC1C,KAAK,CAAC,OAAO,CAAC,UAAC,QAAgB,EAAE,KAAa;YAC5C,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC;YACtC,EAAE,CAAC,CAAC,QAAQ,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;gBAClC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAClD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,OAAO,CAAC,IAAI,CAAI,QAAQ,uDAAoD,CAAC,CAAC;YAChF,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED;;;OAGG;IACK,qCAAQ,GAAhB,UAAiB,MAAkB;QACjC,IAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAE3B,gEAAgE;QAChE,+FAA+F;QAC/F,IAAM,aAAa,GAAG,EAAE,CAAC;QACzB,KAAK,CAAC,OAAO,CAAC,UAAA,YAAY;YACxB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC;iBACjC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,EAAlC,CAAkC,CAAC;iBAClD,OAAO,CAAC,UAAA,IAAI;gBACX,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACzB,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC1B,CAAC;gBACD,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC;YACxB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,4CAA4C;QAC5C,IAAM,KAAK,GAAG,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;aACvB,OAAO,CAAC,UAAA,IAAI;YACX,KAAK,CAAC,OAAO,CAAC,UAAA,YAAY;gBACxB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACjB,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;gBACnB,CAAC;gBACD,IAAM,UAAU,GAAG,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;gBACtD,2DAA2D;gBAC3D,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;oBACf,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;gBAC/C,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEL,IAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7B,yCAAyC;QACzC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;aAChC,OAAO,CAAC,UAAA,IAAI;YACX,OAAO,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;YAC3C,OAAO,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEL,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;aACvB,OAAO,CAAC,UAAA,IAAI;YACX,IAAM,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAkB,CAAC;YAC3E,yCAAyC;YACzC,EAAE,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzC,iCAAiC;gBACjC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,gBAAgB,CAAC;gBACrD,6CAA6C;YAC/C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,gEAAgE;gBAChE,4EAA4E;gBAC5E,OAAO,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;gBACzC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,GAAG;oBAClD,MAAM,EAAE,gBAAgB;oBACxB,IAAI,EAAE,CAAC;iBACR,CAAC;YACJ,CAAC;QACH,CAAC,CAAC,CAAC;QACL,wDAAwD;QACxD,0CAA0C;QAC1C,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YACpB,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC9B,CAAC;QACD,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;IAEO,qCAAQ,GAAhB,UAAiB,MAAkB;QACjC,MAAM,CAAC,CAAC,CAAC,KAAK,OAAP,CAAC,GAAO,EAAE,SAAK,MAAM,CAAC,KAAK,EAAe,CAAC;IACpD,CAAC;IAED;;;OAGG;IACK,gDAAmB,GAA3B,UAA4B,MAAkB;QAC5C,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,UAAU,GAAG,EAAE,CAAC;QACzB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;aAC3B,OAAO,CAAC,UAAA,GAAG;YACV,sDAAsD;YACtD,IAAM,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACzC,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAChC,SAAS,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;YACvD,CAAC;YAED,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7C,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC,CAAC,CAAC;QACL,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED;;;OAGG;IACK,0CAAa,GAArB,UAAsB,MAAkB;QACtC,IAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACrC,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,UAAA,GAAG;YACvC,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,OAAO,CAAC,IAAI,CAAI,GAAG,sDAAiD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAG,CAAC,CAAC;YACxH,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAUH,yBAAC;AAAD,CApPA,AAoPC;;AARM,6BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,iCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,eAAe,GAAG;IACzB,EAAC,IAAI,EAAE,oBAAoB,GAAG;CAC7B,EAH6F,CAG7F,CAAC","file":"schema-fixer.service.js","sourceRoot":"","sourcesContent":["/*\n * This file is part of ng2-json-editor.\n * Copyright (C) 2016 CERN.\n *\n * ng2-json-editor is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; either version 2 of the\n * License, or (at your option) any later version.\n *\n * ng2-json-editor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with ng2-json-editor; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n * In applying this license, CERN does not\n * waive the privileges and immunities granted to it by virtue of its status\n * as an Intergovernmental Organization or submit itself to any jurisdiction.\n*/\n\nimport { Injectable } from '@angular/core';\nimport * as _ from 'lodash';\n\nimport { JsonUtilService } from './json-util.service';\nimport { ComponentTypeService } from './component-type.service';\nimport { JSONSchema, SchemaOptions } from '../interfaces';\n\n\nexport class SchemaFixerService {\n\n  constructor(private jsonUtilService: JsonUtilService,\n    private componentTypeService: ComponentTypeService) { }\n\n  /**\n   * Fixes schema to be in a format that expected by json-editor\n   *\n   * @param schema - json schema\n   * @param config - schema specific options\n   * @return - fixed schema\n   */\n  fixSchema(originalSchema: JSONSchema, config?: SchemaOptions): JSONSchema {\n    let schema = _.cloneDeep(originalSchema);\n    if (config) {\n      schema = this.enrichSchemaWithConfig(schema, config);\n    }\n    schema = this.fixRecursively(schema);\n    return schema;\n  }\n\n  /**\n   * Enriches given schema with given configuration objects\n   * puts config into correct places in schema.\n   *\n   * @param schema - json schema\n   * @param config - schema specific options\n   */\n  private enrichSchemaWithConfig(schema: JSONSchema, config: SchemaOptions): JSONSchema {\n    return _.mergeWith(schema, config, (currentSchema, currentConfig, key) => {\n      if ((key === 'properties' || key === 'items') && !currentSchema) {\n        console.warn(`config => ${JSON.stringify(currentConfig, (configKey, value) => {\n          if (typeof value === 'function') {\n            return 'Æ’()';\n          }\n          return value;\n        }, 2)} should not be under \"${key}\" because schema does not have \"${key}\"`);\n        // cancel merge to avoid creating broken json schema\n        return null;\n      }\n      if (currentSchema && key === 'properties') {\n        const configKeys = Object.keys(currentConfig);\n        configKeys\n          .filter(configKey => !currentSchema[configKey])\n          .forEach(wrongConfigKey => {\n            delete currentConfig[wrongConfigKey];\n            console.warn(wrongConfigKey);\n          });\n      }\n    });\n  }\n\n  /**\n   * Applies all fixes to schema recursively\n   */\n  private fixRecursively(schema: JSONSchema): JSONSchema {\n    if (schema.anyOf) {\n      schema = this.fixAnyOf(schema);\n    } else if (schema.allOf) {\n      schema = this.fixAllOf(schema);\n    }\n    if (schema.order) {\n      schema = this.fixOrder(schema);\n    }\n    if (schema.disabled) {\n      schema = this.fixDisabled(schema);\n    }\n    if (schema.alwaysShow) {\n      schema = this.fixAlwaysShow(schema);\n    }\n    if (schema.alwaysShowRegExp) {\n      schema = this.fixAlwaysShowRegExp(schema);\n    }\n    // schema fixes must be done above\n\n    // recursively call for deeper parts of schema\n    if (schema.properties) {\n      Object.keys(schema.properties)\n        .forEach(prop => {\n          schema.properties[prop] = this.fixRecursively(schema.properties[prop]);\n        });\n    } else if (schema.items) {\n      schema.items = this.fixRecursively(schema.items);\n    }\n    // fixes that needs above fixes to be done deeply for the current schema\n    schema.componentType = this.componentTypeService.getComponentType(schema);\n\n    return schema;\n  }\n\n  /**\n   * Fixes disabled config to assign the disabled attribute\n   * to array items or object properties\n   */\n  private fixDisabled(schema: JSONSchema): JSONSchema {\n    if (schema.items) {\n      schema.items.disabled = true;\n    } else if (schema.properties) {\n      Object.keys(schema.properties)\n        .forEach(prop => {\n          schema.properties[prop].disabled = true;\n        });\n    }\n    return schema;\n  }\n\n  /**\n   * Fixes order config to assign the right priority to properties\n   */\n  private fixOrder(schema: JSONSchema): JSONSchema {\n    const order: Array<string> = schema.order;\n    order.forEach((orderKey: string, index: number) => {\n      const priority = order.length - index;\n      if (orderKey in schema.properties) {\n        schema.properties[orderKey].priority = priority;\n      } else {\n        console.warn(`${orderKey} defined in order config does not exist in schema.`);\n      }\n    });\n    return schema;\n  }\n\n  /**\n   * Fixes anyOf schemas with exactly same property structure\n   * it merges all enum fields in anyOf elements\n   */\n  private fixAnyOf(schema: JSONSchema): JSONSchema {\n    const anyOf = schema.anyOf;\n\n    // find existence count of all enum properties in anyOf elements\n    // the reason of this, a field could be enum type for some and not for some other anyOf element\n    const enumPropCount = {};\n    anyOf.forEach(anyOfElement => {\n      Object.keys(anyOfElement.properties)\n        .filter(prop => anyOfElement.properties[prop].enum)\n        .forEach(prop => {\n          if (!enumPropCount[prop]) {\n            enumPropCount[prop] = 0;\n          }\n          enumPropCount[prop]++;\n        });\n    });\n\n    // combine all enum arrays in anyOf elements\n    const enums = {};\n    Object.keys(enumPropCount)\n      .forEach(prop => {\n        anyOf.forEach(anyOfElement => {\n          if (!enums[prop]) {\n            enums[prop] = [];\n          }\n          const enumValues = anyOfElement.properties[prop].enum;\n          // check if current field is enum for current anyOf element\n          if (enumValues) {\n            enums[prop] = enums[prop].concat(enumValues);\n          }\n        });\n      });\n\n    const fixedSchema = anyOf[0];\n    // shallow cleaning of format and pattern\n    Object.keys(fixedSchema.properties)\n      .forEach(prop => {\n        delete fixedSchema.properties[prop].format;\n        delete fixedSchema.properties[prop].pattern;\n      });\n\n    Object.keys(enumPropCount)\n      .forEach(prop => {\n        const uniqueEnumValues = Array.from(new Set(enums[prop])) as Array<string>;\n        // if a field enum for all anyOf elements\n        if (enumPropCount[prop] === anyOf.length) {\n          // merge all enum values into one\n          fixedSchema.properties[prop].enum = uniqueEnumValues;\n          // if a field enum for some of anyOf elements\n        } else {\n          // create a autocomplete config so that it will allow any values\n          // but autocomplete from enum values from where the field is defined as enum\n          delete fixedSchema.properties[prop].enum;\n          fixedSchema.properties[prop].autocompletionConfig = {\n            source: uniqueEnumValues,\n            size: 7\n          };\n        }\n      });\n    // copy disabled attribute inside fixedSchema because it\n    // is outside anyOf element and is ignored\n    if (schema.disabled) {\n      fixedSchema.disabled = true;\n    }\n    return fixedSchema;\n  }\n\n  private fixAllOf(schema: JSONSchema): JSONSchema {\n    return _.merge({}, ...schema.allOf) as JSONSchema;\n  }\n\n  /**\n   * Adds keys that matches `alwaysShowRegExp` to `alwaysShow`.\n   * Passes `alwaysShowRegExp` down to children so that it is applied recursively.\n   */\n  private fixAlwaysShowRegExp(schema: JSONSchema): JSONSchema {\n    if (!schema.alwaysShow) {\n      schema.alwaysShow = [];\n    }\n    Object.keys(schema.properties)\n      .forEach(key => {\n        // pass alwaysShowRegExp down to apply it recursively.\n        const subSchema = schema.properties[key];\n        if (subSchema.type === 'object') {\n          subSchema.alwaysShowRegExp = schema.alwaysShowRegExp;\n        }\n\n        if (key.search(schema.alwaysShowRegExp) > -1) {\n          schema.alwaysShow.push(key);\n        }\n      });\n    return schema;\n  }\n\n  /**\n   * Removes alwayShow fields that aren't in the schema.properties\n   * and warns on console.\n   */\n  private fixAlwaysShow(schema: JSONSchema): JSONSchema {\n    const alwaysShow = schema.alwaysShow;\n    schema.alwaysShow = alwaysShow.filter(key => {\n      if (schema.properties[key]) {\n        return true;\n      } else {\n        console.warn(`${key} is configured as alwaysShow but it is not in ${JSON.stringify(Object.keys(schema.properties))}`);\n      }\n    });\n    return schema;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: JsonUtilService, },\n{type: ComponentTypeService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}