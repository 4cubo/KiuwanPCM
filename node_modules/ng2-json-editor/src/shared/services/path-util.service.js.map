{"version":3,"sources":["../../../../staging/src/shared/services/path-util.service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;GAoBG;AAEH,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAI3C;IAAA;QAEW,cAAS,GAAG,GAAG,CAAC;IAuE3B,CAAC;IArEC;;;;;OAKG;IACH,2DAAiC,GAAjC,UAAkC,IAAgB,EAAE,IAAa;QAC/D,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,IAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;QAC/B,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,UAAU,EAAE,KAAK,EAAE,EAAE,CAAC;YAChD,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;YAC7E,EAAE,CAAC,CAAC,OAAO,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAChD,iDAAiD;gBACjD,KAAK,CAAC,GAAG,EAAE,CAAC;gBACZ,KAAK,CAAC;YACR,CAAC;QACH,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,+DAAqC,GAArC,UAAsC,IAAgB,EAAE,gBAAyB;QAC/E,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,gBAAgB,CAAC,CAAC;IAChE,CAAC;IAED;;;;;;OAMG;IACH,2CAAiB,GAAjB,UAAkB,IAAgB,EAAE,gBAAyB;QAC3D,IAAI,GAAG,gBAAgB,GAAG,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAChD,GAAG,CAAC,CAAC,IAAM,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrB,CAAC;QACH,CAAC;QACD,MAAM,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAED;;;OAGG;IACH,sCAAY,GAAZ,UAAa,IAAgB;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,KAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAG,CAAC;QACzD,CAAC;IAEH,CAAC;IAED;;;OAGG;IACH,qCAAW,GAAX,UAAY,UAAkB;QAC5B,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;aACpC,KAAK,CAAC,CAAC,CAAC,CAAC,mBAAmB;aAC5B,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,EAAlD,CAAkD,CAAC,CAAC;IACtE,CAAC;IAOH,sBAAC;AAAD,CAzEA,AAyEC;;AANM,0BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,8BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"path-util.service.js","sourceRoot":"","sourcesContent":["/*\n * This file is part of ng2-json-editor.\n * Copyright (C) 2016 CERN.\n *\n * ng2-json-editor is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; either version 2 of the\n * License, or (at your option) any later version.\n *\n * ng2-json-editor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with ng2-json-editor; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n * In applying this license, CERN does not\n * waive the privileges and immunities granted to it by virtue of its status\n * as an Intergovernmental Organization or submit itself to any jurisdiction.\n */\n\nimport { Injectable } from '@angular/core';\n\n\n\nexport class PathUtilService {\n\n  readonly separator = '/';\n\n  /**\n   *\n   * @param path - Element's path\n   * @param root - Find nearest or root parent array. True for root and false for nearest array parent\n   * @returns - Returns the path to the array parent\n   */\n  getNearestOrRootArrayParentInPath(path: Array<any>, root: boolean): Array<any> {\n    let _path = [];\n    const pathLength = path.length;\n    for (let index = 0; index < pathLength; index++) {\n      _path = root ? path.slice(0, index + 1) : path.slice(0, path.length - index);\n      if (typeof _path[_path.length - 1] === 'number') {\n        // transform ['arrayParent',0] => ['arrayParent']\n        _path.pop();\n        break;\n      }\n    }\n    return _path;\n  }\n\n  getElementIndexInForwardOrReversePath(path: Array<any>, directPathSearch: boolean): number {\n    return this.findIndexFromPath(path.slice(), directPathSearch);\n  }\n\n  /**\n   *\n   * @param path - The path of an element\n   * @param directPathSearch - Flag for define direct or reverse searching in path. Set to true for searching in direct\n   * or false for searching in reverse path\n   * @returns - Returns found index in path or -1 if not found\n   */\n  findIndexFromPath(path: Array<any>, directPathSearch: boolean): number {\n    path = directPathSearch ? path : path.reverse();\n    for (const index in path) {\n      if (!isNaN(path[index])) {\n        return path[index];\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Converts path array `/` separated path string.\n   * Example: from ['foo', 'bar', 0] to '/foo/bar/0'\n   */\n  toPathString(path: Array<any>): string {\n    if (path.length === 0) {\n      return '';\n    } else {\n      return `${this.separator}${path.join(this.separator)}`;\n    }\n\n  }\n\n  /**\n   * Converts `/` separated path string to path array.\n   * Example from '/foo/bar/0' to ['foo', 'bar', 0]\n   */\n  toPathArray(pathString: string): Array<any> {\n    return pathString.split(this.separator)\n      .slice(1) // remove the empty\n      .map((key) => isNaN(parseInt(key, 10)) ? key : parseInt(key, 10));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}