{"version":3,"sources":["../../../../staging/src/shared/services/find-replace-all.service.ts"],"names":[],"mappings":"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","file":"find-replace-all.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { List, Map } from 'immutable';\n\nimport { JSONSchema } from '../interfaces';\n\n\nexport class FindReplaceAllService {\n\n  // TODO: fix compiler errors when type of immutable `List<any> | Map<string, any>`\n  /**\n   * Does deep replace when it finds the occurance in an immutable List and Map\n   * uses schema to skip disabled properties\n   *\n   * @param {List<any> | Map<string, any} immutable\n   * @param {Object} schema\n   * @param {string} find\n   * @param {replace} replace\n   * @param {boolean} matchWhole - looks for whole match to a string property of immutable\n   * @param {Array<any> | Object} diffHtml - TODO: describe\n   */\n  findReplaceInImmutable(immutable: any, schema: JSONSchema, find: string, replace: string, exact = false, diffHtml?: Array<any> | Object):\n    { replaced: any, diffHtml: Array<any> | Object } {\n    const immutableAsMutable = immutable.asMutable();\n    const isList = List.isList(immutable);\n    // create empty array or object for the immutable to store diff\n    diffHtml = isList ? [] : {};\n    immutableAsMutable.forEach((value, key) => {\n      const innerSchema = isList ? schema.items : schema.properties[key];\n      // ignore disabled and ref fields\n      if (innerSchema.disabled || innerSchema.hidden || key === '$ref') {\n        return;\n        // TODO: is `schema.type === 'string'` better?\n      } else if (typeof value === 'string') {\n        // assign value to diff as initial, if nothing has changed it will remain same\n        let diff = value;\n        // create html diff for each possible change\n        const singleDiffHtml = `<strong style='color: green;'>${replace}</strong><del><em style='color: red;'>${find}</em></del>`;\n        if (!exact) {\n          const regExp = new RegExp(find, 'g');\n          const replaced = value.replace(regExp, replace);\n          immutableAsMutable.set(key, replaced);\n          // create diff for multiple changes in value\n          diff = diff.replace(regExp, singleDiffHtml);\n        } else if (value === find) {\n          immutableAsMutable.set(key, replace);\n          diff = singleDiffHtml;\n        }\n        diffHtml[key] = diff;\n      // TODO: is `schema.type === 'object' || schema.type === 'array'` better?\n      } else if (List.isList(value) || Map.isMap(value)) {\n        // create empty array or object for the value in diffHtml\n        const result = this.\n          findReplaceInImmutable(immutableAsMutable.get(key), innerSchema, find, replace, exact, diffHtml[key]);\n        diffHtml[key] = result.diffHtml;\n        immutableAsMutable.set(key, result.replaced);\n      }\n    });\n    return { replaced: immutableAsMutable.asImmutable(), diffHtml };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}