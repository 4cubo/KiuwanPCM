{"version":3,"sources":["../../../../staging/src/shared/services/problems.service.ts"],"names":[],"mappings":"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","file":"problems.service.js","sourceRoot":"","sourcesContent":["/*\n * This file is part of ng2-json-editor.\n * Copyright (C) 2017 CERN.\n *\n * ng2-json-editor is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; either version 2 of the\n * License, or (at your option) any later version.\n *\n * ng2-json-editor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with ng2-json-editor; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n * In applying this license, CERN does not\n * waive the privileges and immunities granted to it by virtue of its status\n * as an Intergovernmental Organization or submit itself to any jurisdiction.\n */\n\nimport { Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { Observable } from 'rxjs/Observable';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\n\nimport {\n  SchemaValidationProblems,\n  CategorizedValidationProblems,\n  ValidationProblem,\n  ProblemCollectionType,\n  ProblemCount\n} from '../interfaces';\n\n\nexport class ProblemsService {\n\n  readonly externalCategorizedProblems$ = new ReplaySubject<CategorizedValidationProblems>(1);\n  readonly internalCategorizedProblems$ = new ReplaySubject<CategorizedValidationProblems>(1);\n\n  private readonly externalProblemCount$ = new ReplaySubject<ProblemCount>(1);\n  private readonly internalProblemCount$ = new ReplaySubject<ProblemCount>(1);\n  readonly errorCount$ = this.getTotalDistinctProblemCount$ForType('errors');\n  readonly warningCount$ = this.getTotalDistinctProblemCount$ForType('warnings');\n\n  readonly internalProblemMap$ = new ReplaySubject<SchemaValidationProblems>(1);\n  private internalProblemMap: SchemaValidationProblems = {};\n\n  private internalCategorizedProblemMap: CategorizedValidationProblems = { errors: {}, warnings: {} };\n  private externalCategorizedProblemMap: CategorizedValidationProblems = { errors: {}, warnings: {} };\n\n  private externalProblemCount = { errors: 0, warnings: 0 };\n  private internalProblemCount = { errors: 0, warnings: 0 };\n\n  constructor() {\n    // set default counts to components\n    this.externalProblemCount$.next(this.externalProblemCount);\n    this.internalProblemCount$.next(this.internalProblemCount);\n  }\n\n  private getTotalDistinctProblemCount$ForType(type: ProblemCollectionType): Observable<number> {\n    const external$ = this.externalProblemCount$\n      .map(counts => counts[type]);\n    const internal$ = this.internalProblemCount$\n      .map(counts => counts[type]);\n    return combineLatest(external$, internal$, (external, internal) => external + internal)\n      .distinctUntilChanged();\n  }\n\n  set externalProblems(problems: SchemaValidationProblems) {\n    const { categorizedProblemMap, errorCount, warningCount } = this.categorizeProblemMap(problems);\n\n    this.externalProblemCount = { errors: errorCount, warnings: warningCount };\n    this.externalProblemCount$.next(this.externalProblemCount);\n\n    this.externalCategorizedProblemMap = categorizedProblemMap;\n    this.externalCategorizedProblems$.next(this.externalCategorizedProblemMap);\n  }\n\n  setInternalProblemsForPath(path: string, problems: Array<ValidationProblem>) {\n    this.internalProblemMap[path] = problems;\n    this.internalProblemMap$.next(this.internalProblemMap);\n\n    const categorizedProblems = this.categorizeValidationProblems(problems);\n\n    this.internalProblemCount.errors += categorizedProblems.errors.length - this.internalProblemCountForPath(path, 'errors');\n    this.internalProblemCount.warnings += categorizedProblems.warnings.length - this.internalProblemCountForPath(path, 'warnings');\n    this.internalProblemCount$.next(this.internalProblemCount);\n\n    this.internalCategorizedProblemMap.errors[path] = categorizedProblems.errors;\n    this.internalCategorizedProblemMap.warnings[path] = categorizedProblems.warnings;\n    this.internalCategorizedProblems$.next(this.internalCategorizedProblemMap);\n  }\n\n  private internalProblemCountForPath(path: string, type: ProblemCollectionType): number {\n    if (this.internalCategorizedProblemMap[type][path]) {\n      return this.internalCategorizedProblemMap[type][path].length;\n    }\n    return 0;\n  }\n\n  hasProblem(path: string): boolean {\n    const internalProblems = this.internalCategorizedProblemMap.errors[path];\n    const externalProblems = this.externalCategorizedProblemMap.errors[path];\n    const internalProblemCount = internalProblems ? internalProblems.length : 0;\n    const externalProblemCount = externalProblems ? externalProblems.length : 0;\n    return (internalProblemCount + externalProblemCount) > 0;\n  }\n\n  private categorizeProblemMap(problemMap: SchemaValidationProblems): {\n    categorizedProblemMap: CategorizedValidationProblems,\n    errorCount: number, warningCount: number\n  } {\n    const categorizedProblemMap = { errors: {}, warnings: {} };\n    let errorCount = 0;\n    let warningCount = 0;\n\n    Object.keys(problemMap)\n      .map(path => {\n        const validationProblems = problemMap[path];\n        const categorized = this.categorizeValidationProblems(validationProblems);\n        return { path, categorized };\n      }).forEach(problemsForPath => {\n        categorizedProblemMap.errors[problemsForPath.path] = problemsForPath.categorized.errors;\n        categorizedProblemMap.warnings[problemsForPath.path] = problemsForPath.categorized.warnings;\n        errorCount += problemsForPath.categorized.errors.length;\n        warningCount += problemsForPath.categorized.warnings.length;\n      });\n    return { categorizedProblemMap, errorCount, warningCount };\n  }\n\n  private categorizeValidationProblems(validationProblems: Array<ValidationProblem>) {\n    const categorized: { errors: Array<ValidationProblem>, warnings: Array<ValidationProblem> }\n      = { errors: [], warnings: [] };\n    validationProblems.forEach(error => {\n      if (error.type === 'Error') {\n        categorized.errors.push(error);\n      } else {\n        categorized.warnings.push(error);\n      }\n    });\n    return categorized;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}