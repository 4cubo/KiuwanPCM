{"version":3,"sources":["../../../../staging/src/shared/services/keys-store.service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;EAoBE;AAEF,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,GAAA,EAAK,IAAA,EAAiC,GAAA,EAAI,MAAO,WAAA,CAAY;AACtE,OAAO,EAAE,aAAA,EAAc,MAAO,oBAAA,CAAqB;AACnD,OAAO,EAAE,OAAA,EAAQ,MAAO,cAAA,CAAe;AAGvC,OAAO,EAAE,eAAA,EAAgB,MAAO,qBAAA,CAAsB;AACtD,OAAO,EAAE,iBAAA,EAAkB,MAAO,uBAAA,CAAwB;AAC1D,OAAO,EAAE,iBAAA,EAAkB,MAAO,uBAAA,CAAwB;AAG1D;IAKE,0BAAoB,iBAAoC,EAC9C,eAAgC,EAChC,iBAAoC;QAF1B,sBAAiB,GAAjB,iBAAiB,CAAmB;QAC9C,oBAAe,GAAf,eAAe,CAAiB;QAChC,sBAAiB,GAAjB,iBAAiB,CAAmB;QAJvC,iBAAY,GAAG,IAAI,OAAO,EAA8C,CAAC;IAI9B,CAAC;IAEnD,kCAAO,GAAP,UAAQ,IAAY;QAClB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED;;;;;;OAMG;IACH,iCAAM,GAAN,UAAO,IAAY,EAAE,GAAW,EAAE,MAAkB,EAAE,KAAW;QAAjE,iBAgBC;QAdC,sFAAsF;QACtF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;aACpC,GAAG,CAAC,GAAG,CAAC;aACR,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,KAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,EAApC,CAAoC,CAAuB,CAAC;QAC9E,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,MAAA,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3D,IAAM,UAAU,GAAG,KAAG,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,GAAG,GAAK,CAAC;QAEpE,IAAM,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,KAAK,QAAQ,IAAI,SAAS,CAAC,aAAa,KAAK,YAAY,CAAC,CAAC,CAAC;YAC5E,IAAI,CAAC,8BAA8B,CAAC,KAAK,IAAI,GAAG,EAAe,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;QAC1F,CAAC;QAED,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IAED,qCAAU,GAAV,UAAW,IAAgB;QACzB,IAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACtC,IAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,yDAAyD;QACzD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QACtC,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACH,0CAAe,GAAf,UAAgB,IAAgB,EAAE,IAAsB;QACtD,0EAA0E;QAC1E,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAC1C,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACrC,IAAM,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YACzE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;gBACpC,oDAAoD;gBACpD,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACpB,6BAA6B;gBAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC7C,oFAAoF;oBACpF,IAAM,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBACxC,IAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;oBAC/D,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,KAAK,QAAQ,IAAI,SAAS,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC;wBAC9D,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;oBAC/E,CAAC;oBACD,sCAAsC;gBACxC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,IAAM,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;oBACvE,oCAAoC;oBACpC,EAAE,CAAC,CAAC,aAAa,CAAC,aAAa,KAAK,YAAY,CAAC,CAAC,CAAC;wBACjD,yFAAyF;wBACzF,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;wBACzF,0BAA0B;oBAC5B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,qFAAqF;wBACrF,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,GAAG,EAAE,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC9F,CAAC;gBACH,CAAC;gBACD,kDAAkD;gBAClD,KAAK,CAAC;YACR,CAAC;QACH,CAAC;IACH,CAAC;IAED,oCAAS,GAAT,UAAU,UAAkB,EAAE,GAAW;QAAzC,iBAiBC;QAhBC,iCAAiC;QACjC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAChE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAC7E,8BAA8B;QAC9B,IAAM,cAAc,GAAG,KAAG,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,GAAG,GAAK,CAAC;QAC9E,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QACrC,kDAAkD;QAClD,IAAM,yBAAyB,GAAG,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;QAClF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;aACtB,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,EAA1C,CAA0C,CAAC;aAC1D,OAAO,CAAC,UAAA,SAAS;YAChB,OAAO,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAC/B,OAAO,KAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,8CAAmB,GAAnB,UAAoB,QAAoB,EAAE,MAAc,EAAE,MAAc;QAAxE,iBAmCC;QAlCC,IAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QACjE,EAAE,CAAC,CAAC,UAAU,CAAC,aAAa,KAAK,cAAc,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC;QAAC,CAAC;QAE5D,IAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QACnE,IAAM,GAAG,GAAG,KAAG,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,GAAG,MAAQ,CAAC;QAC1E,IAAM,GAAG,GAAG,KAAG,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,GAAG,MAAQ,CAAC;QAC1E,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACzB,wBAAwB;QACxB,IAAM,cAAc,GAAG,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;QAC5D,IAAM,cAAc,GAAG,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;QAC5D,IAAM,aAAa,GAAkE,EAAE,CAAC;QACxF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;aACtB,OAAO,CAAC,UAAA,IAAI;YACX,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;gBAC5D,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC3E,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBAC3C,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;gBAC5D,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC,CAAC,CAAC;QACL,aAAa;aACV,OAAO,CAAC,UAAA,IAAI;YACX,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YACjC,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QACL,aAAa;aACV,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,aAAa,CAAC,IAAI,CAAC,UAAA,SAAS,IAAI,OAAA,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC,EAAE,EAA1B,CAA0B,CAAC,EAA5D,CAA4D,CAAC;aAC5E,OAAO,CAAC,UAAA,IAAI;YACX,OAAO,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC/B,OAAO,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,uCAAY,GAAZ,UAAa,IAAsB,EAAE,MAAkB;QACrD,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,8BAA8B,CAAC,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;IACxD,CAAC;IAED,yDAA8B,GAA9B,UAA+B,SAAyC,EAAE,IAAyB,EAAE,MAAmB;QAAxH,iBA8BC;QA7BC,wDAAwD;QACxD,IAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QAExF,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAC5D,CAAC;QAED,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC7B,IAAM,KAAG,GAAG,SAA6B,IAAI,GAAG,EAAe,CAAC;YAChE,IAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,KAAG,EAAE,MAAM,CAAC,CAAC;YAEnE,iBAAiB;YACjB,SAAS;iBACN,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAA5C,CAA4C,CAAC;iBAC3D,OAAO,CAAC,UAAA,GAAG;gBACV,IAAM,QAAQ,GAAG,KAAG,UAAU,GAAG,KAAI,CAAC,eAAe,CAAC,SAAS,GAAG,GAAK,CAAC;gBACxE,KAAI,CAAC,8BAA8B,CAAC,KAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;YACtF,CAAC,CAAC,CAAC;QACP,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,aAAa,KAAK,YAAY,CAAC,CAAC,CAAC;YACjD,IAAM,IAAI,GAAG,SAAmC,IAAI,IAAI,EAAoB,CAAC;YAC7E,IAAI,CAAC,qBAAqB,CAAC,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;YACrD,0HAA0H;QAC5H,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,aAAa,KAAK,cAAc,CAAC,CAAC,CAAC;YACnD,IAAM,IAAI,GAAG,SAAmC,IAAI,IAAI,EAAoB,CAAC;YAC7E,IAAI,CAAC,OAAO,CAAC,UAAC,OAAO,EAAE,KAAK;gBAC1B,IAAM,WAAW,GAAG,KAAG,UAAU,GAAG,KAAI,CAAC,eAAe,CAAC,SAAS,GAAG,KAAO,CAAC;gBAC7E,KAAI,CAAC,8BAA8B,CAAC,OAAO,EAAE,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,qGAAqG;IAC7F,gDAAqB,GAA7B,UAA8B,IAAY,EAAE,IAA+B,EAAE,MAAkB;QAAnD,qBAAA,EAAA,OAAO,IAAI,EAAoB;QACzE,qDAAqD;QACrD,IAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI;aACtB,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,EAAzB,CAAyB,CAAC;aACxC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG,IAAK,OAAA,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,EAAf,CAAe,EAAE,EAAE,CAAC,CAAC,CAAC;QAC9C,IAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC;QAChC,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAClD,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAChC,CAAC;IAED,mGAAmG;IAC3F,6CAAkB,GAA1B,UAA2B,IAAY,EAAE,GAAwB,EAAE,MAAkB;QAA5C,oBAAA,EAAA,MAAM,GAAG,EAAe;QAC/D,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,MAAM,CAAC,CAAC;QACtD,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAC9B,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACK,mCAAQ,GAAhB,UAAiB,IAAyB,EAAE,MAAkB;QAA9D,iBAOC;QANC,MAAM,CAAC,IAAI;aACR,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,KAAI,CAAC,iBAAiB,CAAC,SAAS,EAAjE,CAAiE,CAAC;aAChF,MAAM,CAAC,MAAM,CAAC,QAAQ,IAAI,EAAE,CAAC;aAC7B,MAAM,CAAC,MAAM,CAAC,UAAU,IAAI,EAAE,CAAC;aAC/B,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,KAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,EAApC,CAAoC,CAAC;aACpD,YAAY,EAAE,CAAC;IACpB,CAAC;IAEO,4CAAiB,GAAzB,UAA0B,CAAS,EAAE,CAAS,EAAE,MAAkB;QAChE,yCAAyC;QACzC,IAAM,EAAE,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC;QAC9C,IAAM,EAAE,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC;QAE9C,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAAC,CAAC;QAC3B,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,CAAC,CAAC;QAAC,CAAC;QAE1B,uBAAuB;QACvB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAAC,CAAC;QACzB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,CAAC,CAAC;QAAC,CAAC;QACxB,MAAM,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,sCAAW,GAAnB,UAAoB,GAAW,EAAE,MAAkB;QACjD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,OAAI,GAAG,6CAAuC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,SAAS,EAAE,CAAC,CAAG,CAAC,CAAC;QACnH,CAAC;QACD,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;IACxC,CAAC;IAEO,0CAAe,GAAvB,UAAwB,MAAkB;QACxC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,CAAC;IAC7D,CAAC;IAEO,kCAAO,GAAf,UAAgB,IAAY,EAAE,IAAwB;QACpD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QAC1B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAUH,uBAAC;AAAD,CAhQA,AAgQC;;AATM,2BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,+BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,iBAAiB,GAAG;IAC3B,EAAC,IAAI,EAAE,eAAe,GAAG;IACzB,EAAC,IAAI,EAAE,iBAAiB,GAAG;CAC1B,EAJ6F,CAI7F,CAAC","file":"keys-store.service.js","sourceRoot":"","sourcesContent":["/*\n * This file is part of ng2-json-editor.\n * Copyright (C) 2016 CERN.\n *\n * ng2-json-editor is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; either version 2 of the\n * License, or (at your option) any later version.\n *\n * ng2-json-editor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with ng2-json-editor; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n * In applying this license, CERN does not\n * waive the privileges and immunities granted to it by virtue of its status\n * as an Intergovernmental Organization or submit itself to any jurisdiction.\n*/\n\nimport { Injectable } from '@angular/core';\nimport { Map, List, OrderedSet, Iterable, Set, Seq } from 'immutable';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { Subject } from 'rxjs/Subject';\n\nimport { JSONSchema } from '../interfaces';\nimport { PathUtilService } from './path-util.service';\nimport { JsonSchemaService } from './json-schema.service';\nimport { AppGlobalsService } from './app-globals.service';\n\n\nexport class KeysStoreService {\n  private keys$Map: { [path: string]: ReplaySubject<OrderedSet<string>> };\n  public keysMap: { [path: string]: OrderedSet<string> };\n  public onKeysChange = new Subject<{ path: string, keys: OrderedSet<string> }>();\n\n  constructor(private appGlobalsService: AppGlobalsService,\n    private pathUtilService: PathUtilService,\n    private jsonSchemaService: JsonSchemaService) { }\n\n  forPath(path: string): ReplaySubject<OrderedSet<string>> {\n    return this.keys$Map[path];\n  }\n\n  /**\n   * Adds a key to the specified path.\n   *\n   * @param path path to add the key to\n   * @param key key to be added\n   * @param schema schema that belongs to path (schema.items for table-list)\n   */\n  addKey(path: string, key: string, schema: JSONSchema, value?: any): string {\n\n    // FIXME: could do O(logn) insert instead of O(nlogn) since the set is already sorted.\n    this.keysMap[path] = this.keysMap[path]\n      .add(key)\n      .sort((a, b) => this.compareByPriority(a, b, schema)) as OrderedSet<string>;\n    this.keys$Map[path].next(this.keysMap[path]);\n    this.onKeysChange.next({ path, keys: this.keysMap[path] });\n    const newKeyPath = `${path}${this.pathUtilService.separator}${key}`;\n\n    const keySchema = schema.properties[key];\n    if (keySchema.type === 'object' || keySchema.componentType === 'table-list') {\n      this.buildKeysMapRecursivelyForPath(value || Map<string, any>(), newKeyPath, keySchema);\n    }\n\n    return newKeyPath;\n  }\n\n  deletePath(path: Array<any>) {\n    const lastKey = path[path.length - 1];\n    const parentPath = this.pathUtilService.toPathString(path.slice(0, -1));\n    // don't invoke deleteKey if parentPath is primitive-list\n    if (this.keysMap[parentPath]) {\n      this.deleteKey(parentPath, lastKey);\n    }\n  }\n\n  /**\n   * Sync keys in store for the given path or its parent, grand parent etc. if necessary\n   *\n   * @param path path to the (re)set field\n   * @param json whole json\n   */\n  syncKeysForPath(path: Array<any>, json: Map<string, any>) {\n    // search from leaf to root, to find the first path with entry in keys map\n    for (let i = path.length - 1; i >= 0; i--) {\n      const currentPath = path.slice(0, i);\n      const currentPathString = this.pathUtilService.toPathString(currentPath);\n      if (this.keysMap[currentPathString]) {\n        // path[i] is key that should be added to currentPat\n        const key = path[i];\n        // if currentPath has the key\n        if (this.keysMap[currentPathString].has(key)) {\n          // just build the store keys map for that /current/path/key if it is object or array\n          const keyPath = currentPath.concat(key);\n          const keySchema = this.jsonSchemaService.forPathArray(keyPath);\n          if (keySchema.type === 'object' || keySchema.type === 'array') {\n            this.buildKeysMapRecursivelyForPath(json.getIn(keyPath), keyPath, keySchema);\n          }\n          // if currentPath doesn't have the key\n        } else {\n          const currentSchema = this.jsonSchemaService.forPathArray(currentPath);\n          // if currentPath is to a table list\n          if (currentSchema.componentType === 'table-list') {\n            // have to rebuild keys map for it because key is here an index we don't know what to add\n            this.buildKeysMapRecursivelyForPath(json.getIn(currentPath), currentPath, currentSchema);\n            // if not to a table list.\n          } else {\n            // just add the key which will build keys map for /current/path/key as well if needed\n            this.addKey(currentPathString, key, currentSchema, json.getIn(currentPath.concat(path[i])));\n          }\n        }\n        // break when a entry found for a path in keys map\n        break;\n      }\n    }\n  }\n\n  deleteKey(parentPath: string, key: string) {\n    // remove deleted one from parent\n    this.keysMap[parentPath] = this.keysMap[parentPath].delete(key);\n    this.keys$Map[parentPath].next(this.keysMap[parentPath]);\n    this.onKeysChange.next({ path: parentPath, keys: this.keysMap[parentPath] });\n    // delete keys for deleted one\n    const deletedKeyPath = `${parentPath}${this.pathUtilService.separator}${key}`;\n    delete this.keysMap[deletedKeyPath];\n    delete this.keys$Map[deletedKeyPath];\n    // delete keys for all children of the deleted one\n    const deletedKeyPathChildPrefix = deletedKeyPath + this.pathUtilService.separator;\n    Object.keys(this.keysMap)\n      .filter(path => path.startsWith(deletedKeyPathChildPrefix))\n      .forEach(childPath => {\n        delete this.keysMap[childPath];\n        delete this.keys$Map[childPath];\n      });\n  }\n\n  /**\n   * Swaps keys of given two indices in object list recursively\n   */\n  swapListElementKeys(listPath: Array<any>, index1: number, index2: number) {\n    const listSchema = this.jsonSchemaService.forPathArray(listPath);\n    if (listSchema.componentType !== 'complex-list') { return; }\n\n    const listPathString = this.pathUtilService.toPathString(listPath);\n    const ps1 = `${listPathString}${this.pathUtilService.separator}${index1}`;\n    const ps2 = `${listPathString}${this.pathUtilService.separator}${index2}`;\n    const keys1 = this.keysMap[ps1];\n    this.setKeys(ps1, this.keysMap[ps2]);\n    this.setKeys(ps2, keys1);\n    // swap children as well\n    const ps1ChildPrefix = ps1 + this.pathUtilService.separator;\n    const ps2ChildPrefix = ps2 + this.pathUtilService.separator;\n    const childrenSwaps: Array<{ from: string, to: string, keys: OrderedSet<string> }> = [];\n    Object.keys(this.keysMap)\n      .forEach(path => {\n        if (path.startsWith(ps1ChildPrefix)) {\n          const toPath = path.replace(ps1ChildPrefix, ps2ChildPrefix);\n          childrenSwaps.push({ from: path, to: toPath, keys: this.keysMap[path] });\n        } else if (path.startsWith(ps2ChildPrefix)) {\n          const toPath = path.replace(ps2ChildPrefix, ps1ChildPrefix);\n          childrenSwaps.push({ from: path, to: toPath, keys: this.keysMap[path] });\n        }\n      });\n    childrenSwaps\n      .forEach(swap => {\n        this.setKeys(swap.to, swap.keys);\n        this.onKeysChange.next({ path: swap.to, keys: this.keysMap[swap.to] });\n      });\n    childrenSwaps\n      .filter(swap => !childrenSwaps.some(otherSwap => swap.from === otherSwap.to))\n      .forEach(swap => {\n        delete this.keysMap[swap.from];\n        delete this.keys$Map[swap.from];\n      });\n  }\n\n  buildKeysMap(json: Map<string, any>, schema: JSONSchema) {\n    this.keys$Map = {};\n    this.keysMap = {};\n    this.buildKeysMapRecursivelyForPath(json, '', schema);\n  }\n\n  buildKeysMapRecursivelyForPath(mapOrList: Iterable<string | number, any>, path: string | Array<any>, schema?: JSONSchema) {\n    // TODO: remove this and unify typing when #330 is fixed\n    const pathString = Array.isArray(path) ? this.pathUtilService.toPathString(path) : path;\n\n    if (!schema) {\n      schema = this.jsonSchemaService.forPathString(pathString);\n    }\n\n    if (schema.type === 'object') {\n      const map = mapOrList as Map<string, any> || Map<string, any>();\n      const finalKeys = this.buildkeysForObject(pathString, map, schema);\n\n      // recursive call\n      finalKeys\n        .filter(key => this.isObjectOrArray(schema.properties[key]))\n        .forEach(key => {\n          const nextPath = `${pathString}${this.pathUtilService.separator}${key}`;\n          this.buildKeysMapRecursivelyForPath(map.get(key), nextPath, schema.properties[key]);\n        });\n    } else if (schema.componentType === 'table-list') {\n      const list = mapOrList as List<Map<string, any>> || List<Map<string, any>>();\n      this.buildKeysForTableList(pathString, list, schema);\n      // there is no recursive call for table list items because they aren't expected to have object or object list as property.\n    } else if (schema.componentType === 'complex-list') {\n      const list = mapOrList as List<Map<string, any>> || List<Map<string, any>>();\n      list.forEach((element, index) => {\n        const elementPath = `${pathString}${this.pathUtilService.separator}${index}`;\n        this.buildKeysMapRecursivelyForPath(element, elementPath, schema.items);\n      });\n    }\n  }\n\n  // default value for `list`, if this is called for alwaysShow in which case `list` would be undefined\n  private buildKeysForTableList(path: string, list = List<Map<string, any>>(), schema: JSONSchema) {\n    // get present unique keys in all items of table-list\n    const keys = Seq.Set(list\n      .map(object => object.keySeq().toArray())\n      .reduce((pre, cur) => pre.concat(cur), []));\n    const itemSchema = schema.items;\n    const finalKeys = this.schemafy(keys, itemSchema);\n    this.setKeys(path, finalKeys);\n  }\n\n  // default value for `map`, if this is called for alwaysShow in which case `map` would be undefined\n  private buildkeysForObject(path: string, map = Map<string, any>(), schema: JSONSchema): OrderedSet<string> {\n    const finalKeys = this.schemafy(map.keySeq(), schema);\n    this.setKeys(path, finalKeys);\n    return finalKeys;\n  }\n\n  /**\n   * Filters keys, add alwaysShow fields and sorts by schema.\n   */\n  private schemafy(keys: Seq<number, string>, schema: JSONSchema): OrderedSet<string> {\n    return keys\n      .filter(key => this.isNotHidden(key, schema) || this.appGlobalsService.adminMode)\n      .concat(schema.required || [])\n      .concat(schema.alwaysShow || [])\n      .sort((a, b) => this.compareByPriority(a, b, schema))\n      .toOrderedSet();\n  }\n\n  private compareByPriority(a: string, b: string, schema: JSONSchema): number {\n    // Sort by priority, larger is the first.\n    const pa = schema.properties[a].priority || 0;\n    const pb = schema.properties[b].priority || 0;\n\n    if (pa > pb) { return -1; }\n    if (pa < pb) { return 1; }\n\n    // Sort alphabetically.\n    if (a < b) { return -1; }\n    if (a > b) { return 1; }\n    return 0;\n  }\n\n  private isNotHidden(key: string, schema: JSONSchema): boolean {\n    if (!schema.properties[key]) {\n      throw new Error(`\"${key}\" is not specified as property in \\n${JSON.stringify(schema.properties, undefined, 2)}`);\n    }\n    return !schema.properties[key].hidden;\n  }\n\n  private isObjectOrArray(schema: JSONSchema): boolean {\n    return schema.type === 'object' || schema.type === 'array';\n  }\n\n  private setKeys(path: string, keys: OrderedSet<string>) {\n    this.keysMap[path] = keys;\n    if (!this.keys$Map[path]) {\n      this.keys$Map[path] = new ReplaySubject(1);\n    }\n    this.keys$Map[path].next(keys);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AppGlobalsService, },\n{type: PathUtilService, },\n{type: JsonSchemaService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}