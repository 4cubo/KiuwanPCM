{"version":3,"sources":["../../../../staging/src/shared/services/tabs-util.service.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;EAoBE;AAEF,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,aAAA,EAAc,MAAO,oBAAA,CAAqB;AAKnD,OAAO,EAAE,eAAA,EAAgB,MAAO,qBAAA,CAAsB;AAGtD;IAKE,yBAAmB,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAF1C,mBAAc,GAA0B,IAAI,aAAa,CAAS,CAAC,CAAC,CAAC;IAEvB,CAAC;IAExD,qCAAW,GAAX,UAAY,UAAsB;QAChC,IAAM,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAR,CAAQ,CAAC,CAAC;QACtD,2CAA2C;QAC3C,MAAM,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC;aAC/B,MAAM,CAAC,QAAQ,CAAC,CAAC;IACtB,CAAC;IAED,+CAAqB,GAArB,UAAsB,UAAsB,EAAE,MAAkB;QAC9D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC7B,mCAAmC;YACnC,IAAM,cAAY,GAAG,UAAU,CAAC,IAAI;iBACjC,GAAG,CAAC,UAAA,GAAG;gBACN,IAAM,eAAe,GAAG,EAAE,CAAC;gBAC3B,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,GAAG;oBACxB,eAAe,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC;gBAClC,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,eAAe,CAAC;YACzB,CAAC,CAAC,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG,IAAK,OAAA,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAvB,CAAuB,CAAC,CAAC;YACnD,sDAAsD;YACtD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;iBAC3B,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,cAAY,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC;iBACjC,OAAO,CAAC,UAAA,GAAG;gBACV,cAAY,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,cAAc,CAAC;YAChD,CAAC,CAAC,CAAC;YACL,IAAI,CAAC,kBAAkB,GAAG,cAAY,CAAC;QACzC,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAED,wCAAwC;IACxC,2CAAiB,GAAjB,UAAkB,IAAY;QAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,IAAI,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC;YAC3C,IAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACnF,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpC,CAAC;IACH,CAAC;IAQH,sBAAC;AAAD,CAlDA,AAkDC;;AAPM,0BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,8BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,eAAe,GAAG;CACxB,EAF6F,CAE7F,CAAC","file":"tabs-util.service.js","sourceRoot":"","sourcesContent":["/*\n * This file is part of ng2-json-editor.\n * Copyright (C) 2016 CERN.\n *\n * ng2-json-editor is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; either version 2 of the\n * License, or (at your option) any later version.\n *\n * ng2-json-editor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with ng2-json-editor; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n * In applying this license, CERN does not\n * waive the privileges and immunities granted to it by virtue of its status\n * as an Intergovernmental Organization or submit itself to any jurisdiction.\n*/\n\nimport { Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport * as _ from 'lodash';\nimport { Set } from 'immutable';\n\nimport { TabsConfig, JSONSchema } from '../interfaces';\nimport { PathUtilService } from './path-util.service';\n\n\nexport class TabsUtilService {\n\n  private schemaKeyToTabName: { [key: string]: string };\n  readonly activeTabName$: ReplaySubject<string> = new ReplaySubject<string>(1);\n\n  constructor(public pathUtilService: PathUtilService) { }\n\n  getTabNames(tabsConfig: TabsConfig): Array<string> {\n    const tabNames = tabsConfig.tabs.map(tab => tab.name);\n    // insert default tab name at the beginning\n    return [tabsConfig.defaultTabName]\n      .concat(tabNames);\n  }\n\n  getSchemaKeyToTabName(tabsConfig: TabsConfig, schema: JSONSchema): { [key: string]: string } {\n    if (!this.schemaKeyToTabName) {\n      // set tab.name for configured keys\n      const keyToTabName = tabsConfig.tabs\n        .map(tab => {\n          const keysWithTabName = {};\n          tab.properties.forEach(key => {\n            keysWithTabName[key] = tab.name;\n          });\n          return keysWithTabName;\n        }).reduce((pre, cur) => Object.assign(pre, cur));\n      // set defaultTabName for all other keys in the schema\n      Object.keys(schema.properties)\n        .filter(key => !keyToTabName[key])\n        .forEach(key => {\n          keyToTabName[key] = tabsConfig.defaultTabName;\n        });\n      this.schemaKeyToTabName = keyToTabName;\n    }\n    return this.schemaKeyToTabName;\n  }\n\n  // TODO: maybe this could be a decorator\n  selectTabIfNeeded(path: string) {\n    if (this.schemaKeyToTabName && path !== '') {\n      const tabName = this.schemaKeyToTabName[this.pathUtilService.toPathArray(path)[0]];\n      this.activeTabName$.next(tabName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: PathUtilService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}